#!/usr/bin/env python
"""
Tool to visualize temporal plans generated by Optic!
"""

import sys
import os
import re
import json
import subprocess


class OpticParser():
    def __init__(self, optic_output):
        self.optic_output = optic_output

    def parse(self):
        # Parse with a regular expression, capturing the initial time, action, and duration
        expr = re.compile(r'^(\d+\.\d+):\s*(.*)\[(\d+\.\d+)\]$', re.MULTILINE)
        matches = expr.findall(self.optic_output)
        activities = [{'id': i, 'time_start': float(time_start), 'activity': activity.strip(' '), 'duration': float(duration)} for (i, (time_start, activity, duration)) in enumerate(matches)]
        return activities

    def solution_found(self):
        return '; States evaluated:' in self.optic_output


def pretty_print_activity(activity):
    print "\033[33m{:7.3f}:\033[0m \033[1m{}\033[0m \033[32m[{}]\033[0m".format(activity['time_start'], activity['activity'], activity['duration'])


def open_visualizer(activities):
    url = "file://{}{}?activities={}".format(os.path.abspath(os.path.dirname(__file__)), "/planviz/index.html", json.dumps(activities))
    subprocess.call(["firefox", url])



if __name__ == '__main__':
    # Retrieve optic's output (stdin)
    optic_output = sys.stdin.read()
    # Parse it to return a list of activities
    op = OpticParser(optic_output)
    if op.solution_found():
        activities = op.parse()
        print "\033[1;32mSolution found!\033[0m"
        for activity in activities:
            pretty_print_activity(activity)

        # Send parsed activities to Gantt visualizer...
        # print json.dumps(activities)
        open_visualizer(activities)
    else:
        print "\033[1;31mNo solution found! Here is full planner output:\033[0m"
        print optic_output
